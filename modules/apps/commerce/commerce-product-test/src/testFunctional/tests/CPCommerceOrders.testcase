@component-name = "portal-commerce"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
		
		Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();

			User.logoutPG();
		}
	}

	@description = "This is a test for COMMERCE-6215. Maximum open order per account"
	@ignore = "true"
	@priority = "3"
	test AccountMaximumOpenOrderActive {
		property portal.acceptance = "false";

		// TODO COMMERCE-6215 AccountMaximumOpenOrderActive Pending Implementation

	}

	@description = "This is a test for COMMERCE-6210. Shipment cancelled"
	@ignore = "true"
	@priority = "3"
	test CancelShipmentAndCreateNewFromPendingOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6210 CancelShipmentAndCreateNewFromPendingOrder Pending Implementation
	}

	test EditOrder {
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "CPCommerceOrders#EditOrder";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = "2");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = "2",
			productUnitPrice = "50",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.editOrderItemDetails(
			orderItemQuantity = "4",
			orderItemSKU = "MIN93015");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = "4",
			productSKU = "MIN93015",
			productTotalPrice = "100.00");
	}

	@description = "This is a workaround for an issue with Minium's sidebar on CI"
	test EditOrderCheckingOutViaOrderDetails {
		property test.name.skip.portal.instance = "CPCommerceOrders#EditOrderCheckingOutViaOrderDetails";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		FrontStore.addInitializerProductToCart(
			productName = "ABS Sensor",
			productQuantity = "2");

		Pause(locator1 = "5000");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "View Details");

		Button.click(button = "Checkout");

		Pause(locator1 = "3000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "ABS Sensor",
			productQuantity = "2",
			productUnitPrice = "50",
			shippingMethod = "Standard");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.editOrderItemDetails(
			orderItemQuantity = "4",
			orderItemSKU = "MIN93015");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");

		CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

		CommerceOrders.viewOrdersEntry(
			addressAddress = "Test Address",
			addressCity = "Test City",
			addressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productListPrice = "50.00",
			productName = "ABS Sensor",
			productQuantity = "4",
			productSKU = "MIN93015",
			productTotalPrice = "100.00");
	}

	@description = "This is a test for COMMERCE-5980. As an order manager, I want to edit the payment method and payment status of a submitted order"
	@ignore = "true"
	@priority = "3"
	test EditOrderPaymentMethod {
		property portal.acceptance = "false";

		// TODO COMMERCE-5980 EditOrderPaymentMethod Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-5980. As an order manager, I want to edit the payment method and payment status of a submitted order"
	@ignore = "true"
	@priority = "3"
	test EditOrderPaymentStatus {
		property portal.acceptance = "false";

		// TODO COMMERCE-5980 EditOrderPaymentStatus Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByAccount {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceAccelerators.initializeNewSiteViaAccelerator(
			siteName = "Minium2",
			siteTemplateName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");
		
		AssertElementPresent(
			key_entryName = "Minium Portal",
			locator1 = "CommerceNavigation#ENTRY_NAME");

		AssertElementPresent(
			key_entryName = "Minium2 Portal",
			locator1 = "CommerceNavigation#ENTRY_NAME");	
		
			
		ApplicationsMenu.gotoSite(site = "Minium");
		
		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account 1",
			adminEmailAddress = "test@liferay.com");
		
		Click(locator1 = "Link#BACK");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(
			accountName = "Commerce Account 2",
			adminEmailAddress = "test@liferay.com");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");
		
		Refresh();

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Pause(locator1 = "5000");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = "1",
			productUnitPrice = "24",
			shippingMethod = "Standard");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");
	
		CommerceAcceleratorsInitializer.selectAccountFromAccountSelector(accountName = "Commerce Account 2");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = "1");
					
		ApplicationsMenu.gotoSite(site = "Minium2");		

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		AssertTextEquals.assertPartialText(
				locator1 = "Account#ACCOUNT_MANAGEMENT",
				value1 = "Commerce Account 1");
		
		AssertTextEquals.assertPartialText(
				locator1 = "Account#ACCOUNT_MANAGEMENT",
				value1 = "Commerce Account 2");

		CommerceNavigator.gotoPortlet(
			category = "Order Management",
			portlet = "Orders");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Account",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");
		
		Check.checkNotVisible(
            checkboxName = "Commerce Account 1",
            locator1 = "Checkbox#ANY_CHECKBOX");
		
		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 1");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");
		
		Check.checkNotVisible(
            checkboxName = "Commerce Account 2",
            locator1 = "Checkbox#ANY_CHECKBOX");
		
		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 2");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Channel",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");
		
		Click(
            key_fieldType = "Minium Portal",
            locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 2");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
            key_fieldType = "Minium2 Portal",
            locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
		
		AssertElementNotPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 2");
		
		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Order Status",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
            checkboxName = "Open",
            locator1 = "Checkbox#ANY_CHECKBOX");
		
		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 2");
		
		Button.click(button = "Reset Filters");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Check.checkNotVisible(
            checkboxName = "Pending",
            locator1 = "Checkbox#ANY_CHECKBOX");
		
		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");
		
		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementPresent(
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME",
			key_productName = "Commerce Account 1");

	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByChannel Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByOrderDataRange {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByOrderDataRange Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-5997. As an order manager, I want to filter orders by Channel, Account, Order Data Range and Order Status"
	@ignore = "true"
	@priority = "3"
	test FilterOrderByStatus {
		property portal.acceptance = "false";

		// TODO COMMERCE-5997 FilterOrderByStatus Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-6209. Admin order fulfillment"
	@ignore = "true"
	@priority = "3"
	test FulfillOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6209 FulfillOrder Pending Implementation
	}

	@description = "This is a test for COMMERCE-6213. Buyer Order Approval Workflow"
	@ignore = "true"
	@priority = "3"
	test FulfillOrderWithBuyerOrderApprovalWorkflowActive {
		property portal.acceptance = "false";

		// TODO COMMERCE-6213 FulfillOrderWithBuyerOrderApprovalWorkflowActive Pending Implementation
	}

	@description = "This is a test for COMMERCE-6214. Seller Order Acceptance Workflow"
	@ignore = "true"
	@priority = "3"
	test FulfillOrderWithSellerOrderAcceptanceWorkflowActive {
		property portal.acceptance = "false";

		// TODO COMMERCE-6214 FulfillOrderWithSellerOrderAcceptanceWorkflowActive Pending Implementation
	}

	@description = "This is a test for COMMERCE-6211. Stock management from order"
	@ignore = "true"
	@priority = "3"
	test ManageBackOrdersFromOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6211 ManageBackOrdersFromOrder Pending Implementation
	}

	@description = "This is a test for COMMERCE-6211. Stock management from order"
	@ignore = "true"
	@priority = "3"
	test ManageProductAvailabilityFromOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6211 ManageProductAvailabilityFromOrder Pending Implementation
	}

	@description = "This is a test for COMMERCE-6217. Order Permission Management"
	@ignore = "true"
	@priority = "3"
	test OrderPermissionManagement {
		property portal.acceptance = "false";

		// TODO COMMERCE-6217 OrderPermissionManagement Pending Implementation
	}

	@description = "This is a test for COMMERCE-6216. Search Order from UI"
	@ignore = "true"
	@priority = "3"
	test SearchOrder {
		property portal.acceptance = "false";

		// TODO COMMERCE-6216 SearchOrder Pending Implementation
	}

	@description = "This is a test for COMMERCE-5982. As an order manager, I want to sort orders by ascending or descending order date"
	@ignore = "true"
	@priority = "3"
	test SortOrdersByOrderDate {
		property portal.acceptance = "false";

		// TODO COMMERCE-5982 SortOrdersByOrderDate Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

	@description = "This is a test for COMMERCE-5845. As a product specialist I want to see if a SKU is on order"
	@ignore = "true"
	@priority = "3"
	test ViewOrderSKU {
		property portal.acceptance = "false";

		// TODO COMMERCE-5845 ViewOrderSKU Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
	}

}