@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test AddFieldsetOnBuilderWithSameFieldType {
		property portal.acceptance = "false";

		// TODO LPS-107630 AddFieldsetOnBuilderWithSameFieldType pending implementatio

	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test AddFieldsetOnOtherFieldsetAlreadyOnBuilder {
		property portal.acceptance = "false";

		// TODO LPS-107630 AddFieldsetOnOtherFieldsetAlreadyOnBuilder pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@priority = "5"
	test DuplicateFieldset {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "DuplicateTest",
			structureName = "DuplicateTest");

		DataEngine.addFields(fieldNameList = "Text,Image,Upload");

		WebContentStructures.saveCP(structureName = "DuplicateTest");

		WebContentStructures.addCP(
			structureDescription = "DuplicateTest1",
			structureName = "DuplicateTest1");

		DataEngine.addFieldsets(
			fieldsetsLabel = "DuplicateTest",
			fieldsetsName = "DuplicateTest");

		DataEngine.duplicateFieldsets(fieldsetLabel = "DuplicateTest");

		AssertElementPresent(
			key_fieldsetLabel = "Copy of DuplicateTest",
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		for (var fieldLabelList : list "Copy of Text,Copy of Image,Copy of Upload") {
			AssertElementPresent(
				key_fieldFieldLabel = "${fieldLabelList}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		WebContentStructures.saveCP(structureName = "DuplicateTest1");
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@priority = "4"
	test EditFieldsetPropertiesFromSideBar {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addFieldsets(
			createNewFieldset = "true",
			fieldNameList = "Text",
			fieldsetsLabel = "New Fieldset",
			fieldsetsName = "New Fieldset");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		DataEngine.gotoFieldsetItemEllipsis(fieldsetsName = "New Fieldset");

		MenuItem.click(menuItem = "Edit");

		DataEngine.editFieldLabel(
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Text Edit",
			fieldsetModal = "true");

		Click(locator1 = "Modal#SAVE_BUTTON");

		Alert.viewSuccessMessage();

		DataEngine.addFieldsets(
			fieldsetsLabel = "New Fieldset",
			fieldsetsName = "New Fieldset");

		for (var fieldFieldLabel : list "Text,Text Edit") {
			AssertVisible(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "5"
	test FieldsetNameRenamedWhenNameAlreadyExistent {
		property portal.acceptance = "false";

		// TODO LPS-107630 FieldsetNameRenamedWhenNameAlreadyExistent pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@priority = "4"
	test FieldsetSetAsCollapsible {
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "CollapsibleFieldSetTest",
			structureName = "CollapsibleFieldSetTest");

		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");

		DoubleClick(locator1 = "Modal#CREATE_DATE_FIELD");

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = "CollapsibleFieldSetTest");

		Click(locator1 = "Modal#SAVE_BUTTON");

		DataEngine.addFieldsets(
			fieldsetsLabel = "CollapsibleFieldSetTest",
			fieldsetsName = "CollapsibleFieldSetTest");

		Click(
			key_fieldSetName = "CollapsibleFieldSetTest",
			locator1 = "FormViewBuilder#SELECT_FIELD_SET");

		Check.checkToggleSwitch(
			checkboxName = "Collapsible",
			locator1 = "Checkbox#ANY_CHECKBOX");

		WebContentStructures.saveCP(structureName = "CollapsibleFieldSetTest");

		WebContentStructures.editStructureCP(structureName = "CollapsibleFieldSetTest");

		Click(locator1 = "Button#COLLAPSIBLE");

		AssertElementPresent(locator1 = "FormViewBuilder#FIELD_SET_COLLAPSIBLE");

		WebContentStructures.saveCP(structureName = "CollapsibleFieldSetTest");

		WebContentStructures.editStructureCP(structureName = "CollapsibleFieldSetTest");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		Click(locator1 = "AppBuilder#BUTTON_EDIT_FIELDSET");

		Click(
			key_selectAction = "Delete",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test FieldsetSetAsRepeatable {
		property portal.acceptance = "false";

		// TODO LPS-107630 FieldsetSetAsRepeatable pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test RepeatFieldsetWithoutDuplicatingContent {
		property portal.acceptance = "false";

		// TODO LPS-107630 RepeatFieldsetWithoutDuplicatingContent pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test SaveStructureAddingBackFieldset {
		property portal.acceptance = "false";

		// TODO LPS-107630 SaveStructureAddingBackFieldset pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@priority = "4"
	test ShowAndHideFieldsetLabel {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addFieldsets(
			createNewFieldset = "true",
			fieldNameList = "Date",
			fieldsetsLabel = "New Fieldset",
			fieldsetsName = "New Fieldset");

		DataEngine.editShowOrHideLabel(
			fieldsetLabel = "New Fieldset",
			showLabel = "true");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertVisible(
			key_fieldsetLabel = "New Fieldset",
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		DataEngine.editShowOrHideLabel(
			fieldsetLabel = "New Fieldset",
			showLabel = "false");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertElementNotPresent(
			key_fieldsetLabel = "New Fieldset",
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");
	}

}