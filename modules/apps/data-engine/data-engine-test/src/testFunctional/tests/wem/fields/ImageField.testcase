@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "4"
	test ClearUploadedImage {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentTitle = "${webTitle}");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertClick(
			key_fieldFieldLabel = "Image",
			locator1 = "AppBuilder#CLEAR_SEARCH",
			value1 = "Clear");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertElementNotPresent(locator1 = "WCD#WEB_CONTENT_CONTENT_IMAGE");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "5"
	test DragAndDropImageFieldToBuilder {
		property portal.acceptance = "false";

		// TODO LPS-98073 DragAndDropImageFieldToBuilder pending implementation

	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "4"
	test DuplicateImageField {
		property portal.acceptance = "false";

		// TODO LPS-98073 DuplicateImageField pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "4"
	test LocalizationOfImageFieldtPersists {
		property portal.acceptance = "false";

		var structureTitle = "Test";
		var structureTitlePT = "Teste";
		var fieldLabelEN = "Text EN";
		var fieldLabelPT = "Text PT";
		var fieldHelpEN = "I'm a help text";
		var fieldHelpPT = "Eu sou um texto de ajuda";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${fieldLabelEN}",
			fieldName = "Image");

		DataEngine.editFieldTip(
			fieldFieldLabel = "${fieldLabelEN}",
			fieldHelp = "${fieldHelpEN}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		WebContentStructures.addLocalization(
			locale = "pt_BR",
			localization1Name = "${structureTitlePT}");

		DataEngine.editFieldTip(
			fieldFieldLabel = "${fieldLabelEN}",
			fieldHelp = "${fieldHelpPT}");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "${fieldLabelEN}",
			label = "${fieldLabelPT}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		PortletEntry.changeLocale(locale = "pt_BR");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "${structureTitlePT}");

		DataEngine.viewField(
			fieldFieldLabel = "${fieldLabelPT}",
			fieldHelp = "${fieldHelpPT}",
			fieldName = "Image");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "4"
	test PublishWebContentWithUploadedImageWithoutDescription {
		property portal.acceptance = "false";

		// TODO LPS-98073 PublishWebContentWithUploadedImageWithoutDescription pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "4"
	test SetFieldReferenceOfImageField {
		property portal.acceptance = "false";

		// TODO LPS-98073 SetFieldReferenceOfImageField pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "4"
	test SetHelpTextOfImageField {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var newLabel = "Image";
		var fieldHelp = "Help Text";
		var key_fieldFieldLabel = "${newLabel}";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "${newLabel}",
			fieldName = "Image");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		DataEngine.editFieldTip(
			fieldFieldLabel = "${newLabel}",
			fieldHelp = "${fieldHelp}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "${newLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "${newLabel}");

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_TEXT",
			value1 = "${fieldHelp}");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "4"
	test SetImageDescriptionOnWebContent {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentImageDescription = "My description",
			webContentTitle = "${webTitle}");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		AssertTextEquals(
			key_fieldFieldLabel = "Image",
			locator1 = "WCEditWebContent#IMAGE_DESCRPTION",
			value1 = "My description");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "3"
	test SetImageFieldAsRepeatable {
		property portal.acceptance = "false";

		// TODO LPS-98073 SetImageFieldAsRepeatable pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "5"
	test SetLabelOfImageField {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var newLabel = "Changes";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "I'm a test",
			structureName = "${structureTitle}");

		DataEngine.addFields(fieldNameList = "Image");

		FormViewBuilder.editFieldLabel(
			fieldLabel = "Image",
			label = "${newLabel}");

		Button.clickSave();

		WebContentNavigator.gotoEditStructure(structureName = "${structureTitle}");

		AssertElementPresent(
			key_fieldFieldLabel = "${newLabel}",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "3"
	test ShowAndHideImageFieldLabel {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		DataEngine.editShowOrHideLabel(
			fieldFieldLabel = "Image",
			showLabel = "true");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Image",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		DataEngine.editShowOrHideLabel(
			fieldFieldLabel = "Image",
			showLabel = "false");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Image",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "5"
	test UploadImageFromDocumentsAndMedia {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var webTitle = "WC Title";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "${structureTitle}");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(
			imageFileName = "Document Title",
			navTab = "Documents and Media",
			structureName = "${structureTitle}",
			webContentImage = "Document Title",
			webContentTitle = "${webTitle}");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webTitle}");

		WebContent.viewPGViaWCD(
			image = "true",
			key_image = "Document_1.jpg");
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "5"
	test UploadImageFromLocalStorage {
		property portal.acceptance = "false";

		// TODO LPS-98073 UploadImageFromLocalStorage pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@ignore = "true"
	@priority = "4"
	test UploadInvalidFile {
		property portal.acceptance = "false";

		// TODO LPS-98073 UploadInvalidFile pending implementation
	}

	@description = "This is a test for LPS-98073. As a Developer, I want to Implement the image field type"
	@priority = "4"
	test VerifyRequiredPropertyOfImageField {
		property portal.acceptance = "false";

		var structureTitle = "My Structure";
		var newLabel = "Image";
		var webTitle = "WC Title";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "I'm a Structure",
			structureName = "${structureTitle}");

		DataEngine.addFields(fieldNameList = "Image");

		DataEngine.editFieldRequired(fieldFieldLabel = "Image");

		Button.clickSave();

		NavItem.click(navItem = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "${structureTitle}");

		WebContent.addWithStructureCP(webContentTitle = "${webTitle}");

		PortletEntry.publish();

		AppBuilderAdmin.validateRequiredValidNameMessage();
	}

}